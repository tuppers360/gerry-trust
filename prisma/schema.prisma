// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Views {
  slug  String @id @db.VarChar(128)
  count Int    @default(1)
}

model Donation {
  id              String   @id @default(cuid())
  amount          Int
  giftAid         Boolean  @default(false)
  confirmed       Boolean  @default(false)
  checkoutSession String   @unique
  createdAt       DateTime @default(now())
  message         String?
  Donator         Donator? @relation(fields: [donatorId], references: [id])
  donatorId       String?
}

model Donator {
  id           String     @id @default(cuid())
  email        String?    @unique
  firstName    String?    @db.VarChar(128)
  lastName     String?    @db.VarChar(128)
  addressLine1 String?    @db.VarChar(128)
  addressLine2 String?    @db.VarChar(128)
  town         String?    @db.VarChar(128)
  county       String?    @db.VarChar(128)
  postCode     String?    @db.VarChar(128)
  donation     Donation[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role?     @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  TRUSTEE
  ADMIN
}
